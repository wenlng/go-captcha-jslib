import{activeEffect,trackEffect,triggerEffects}from"./effect";import{toReactive}from"./reactive";import{createDep}from"./reactiveEffect";export function ref(e){return createRef(e)}function createRef(e){return new RefImpl(e)}class RefImpl{constructor(e){this.rawValue=e,this.__v_isRef=!0,this._value=toReactive(e)}get value(){return trackRefValue(this),this._value}set value(e){e!==this.rawValue&&(this.rawValue=e,this._value=e,triggerRefValue(this))}}export function trackRefValue(e){activeEffect&&trackEffect(activeEffect,e.dep=e.dep||createDep((()=>e.dep=void 0),"undefined"))}export function triggerRefValue(e){let t=e.dep;t&&triggerEffects(t)}class ObjectRefImpl{constructor(e,t){this._object=e,this._key=t,this.__v_isRef=!0}get value(){return this._object[this._key]}set value(e){this._object[this._key]=e}}export function toRef(e,t){return new ObjectRefImpl(e,t)}export function toRefs(e){const t={};for(let r in e)t[r]=toRef(e,r);return t}export function unref(e){return isRef(e)?e.value:e}export function proxyRefs(e){return new Proxy(e,{get:(e,t,r)=>unref(Reflect.get(e,t,r)),set:(e,t,r,f)=>isRef(e[t])&&!isRef(r)?e[t].value=r:Reflect.set(e,t,r,f)})}export function isRef(e){return e&&e.__v_isRef}