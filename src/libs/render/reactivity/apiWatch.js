import{isFunction,isObject}from"../shared";import{ReactiveEffect}from"./effect";import{isReactive}from"./reactive";import{isRef}from"./ref";export function watch(e,t,r={}){return doWatch(e,t,r)}export function watchEffect(e,t={}){return doWatch(e,null,t)}function traverse(e,t,r=0,i=new Set){if(!isObject(e))return e;if(t){if(r>=t)return e;r++}if(i.has(e))return e;for(let n in e)traverse(e[n],t,r,i);return e}function doWatch(e,t,{deep:r,immediate:i}){let n,f,o;isReactive(e)?n=()=>(e=>traverse(e,!1===r?1:void 0))(e):isRef(e)?n=()=>e.value:isFunction(e)&&(n=e);const c=e=>{o=()=>{e(),o=void 0}},u=()=>{if(t){const e=a.run();o&&o(),t(e,f,c),f=e}else a.run()},a=new ReactiveEffect(n,u);t?i?u():f=a.run():a.run();return()=>{a.stop()}}