import{ShapeFlags,isFunction,isObject,isString}from"../shared";import{isTeleport}from"./components/Teleport";export const Text=Symbol("Text");export const Fragment=Symbol("Fragment");export function isVnode(e){return e?.__v_isVnode}export function isSameVnode(e,t){return e.type===t.type&&e.key===t.key}export function createVnode(e,t,r,n){const o=isString(e)?ShapeFlags.ELEMENT:isTeleport(e)?ShapeFlags.TELEPORT:isObject(e)?ShapeFlags.STATEFUL_COMPONENT:isFunction(e)?ShapeFlags.FUNCTIONAL_COMPONENT:0,p={__v_isVnode:!0,type:e,props:t,children:r,key:t?.key,el:null,shapeFlag:o,ref:t?.ref,patchFlag:n};return currentAppBlock&&n>0&&currentAppBlock.push(p),r&&(Array.isArray(r)?p.shapeFlag|=ShapeFlags.ARRAY_CHILDREN:isObject(r)?p.shapeFlag|=ShapeFlags.SLOTS_CHILDREN:(r=String(r),p.shapeFlag|=ShapeFlags.TEXT_CHILDREN)),p}let currentAppBlock=null;export function openBlock(){currentAppBlock=[]}export function closeBlock(){currentAppBlock=null}export function setupBlock(e){return e.dynamicChildren=currentAppBlock,closeBlock(),e}export function createElementBlock(e,t,r,n){return setupBlock(createVnode(e,t,r,n))}export function toDisplayString(e){return isString(e)?e:null==e?"":isObject(e)?JSON.stringify(e):String(e)}export{createVnode as createElementVNode};